package javaswingtest;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

public class tabbedpane extends JFrame {
    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private DefaultTableModel inboxTableModel;
    private DefaultTableModel outboxTableModel;
    private DefaultTableModel dropsTableModel;
    private JTabbedPane tabbedPane;
    private RecycleBin recycleBin;

    /**
     * Launch the application
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    tabbedpane frame = new tabbedpane();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     * This constructor sets up the JFrame, initializes the components, and populates the tabs with tables.
     */
    public tabbedpane() {
        setTitle("Emails");  // Set the title of the window
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Define the close operation
        setBounds(100, 100, 800, 600);  // Set the position and size of the window
        contentPane = new JPanel(new BorderLayout());  // Create a content pane with BorderLayout
        setContentPane(contentPane);  // Set the content pane of the frame

        tabbedPane = new JTabbedPane(JTabbedPane.TOP);  // Create a JTabbedPane with tabs on top
        contentPane.add(tabbedPane, BorderLayout.CENTER);  // Add the tabbed pane to the center of the content pane

        recycleBin = new RecycleBin(this);  // Initialize the recycle bin

        // Column names for all tabs
        String[] columnNames = {"Sender", "Receiver", "Date", "MessageType"};

        // Inbox tab
        Object[][] inboxData = {
            {"Ruka300ms", "onlyme@", "1/24/24", "Inbox"},
            {"myzkaji", "onlyme@", "1/24/24", "Inbox"},
            {"Shiru", "onlyme@", "1/24/24", "Inbox"},
            {"Rare", "onlyme@", "1/24/24", "Inbox"},
            {"Espidider", "onlyme@", "1/24/24", "Inbox"},
        };
        JPanel inboxPanel = new JPanel(new BorderLayout());  // Create a panel for the Inbox tab
        tabbedPane.addTab("Inbox", inboxPanel);  // Add the Inbox tab to the tabbed pane
        inboxTableModel = new DefaultTableModel(inboxData, columnNames) {  // Initialize the table model for the Inbox
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Make the table cells non-editable
            }
        };
        JTable inboxTable = new JTable(inboxTableModel);  // Create a table with the Inbox table model
        inboxTable.setPreferredScrollableViewportSize(new Dimension(550, 400));  // Set preferred size for the table
        JScrollPane inboxScrollPane = new JScrollPane(inboxTable);  // Create a scroll pane for the table
        inboxPanel.add(inboxScrollPane, BorderLayout.CENTER);  // Add the scroll pane to the panel
        centerTableHeaders(inboxTable);  // Center the headers of the table
        centerTableData(inboxTable);  // Center the data in the table

        // Outbox tab
        Object[][] outboxData = {
            {"Ellana", "ruka@example.com", "1/23/24", "Outbox"},
            {"Espedida", "espidider@example.com", "1/23/24", "Outbox"},
            {"Reyes", "shiru@example.com", "1/23/24", "Outbox"},
        };
        JPanel outboxPanel = new JPanel(new BorderLayout());  // Create a panel for the Outbox tab
        tabbedPane.addTab("Outbox", outboxPanel);  // Add the Outbox tab to the tabbed pane
        outboxTableModel = new DefaultTableModel(outboxData, columnNames) {  // Initialize the table model for the Outbox
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Make the table cells non-editable
            }
        };
        JTable outboxTable = new JTable(outboxTableModel);  // Create a table with the Outbox table model
        outboxTable.setPreferredScrollableViewportSize(new Dimension(550, 400));  // Set preferred size for the table
        JScrollPane outboxScrollPane = new JScrollPane(outboxTable);  // Create a scroll pane for the table
        outboxPanel.add(outboxScrollPane, BorderLayout.CENTER);  // Add the scroll pane to the panel
        centerTableHeaders(outboxTable);  // Center the headers of the table
        centerTableData(outboxTable);  // Center the data in the table

        // Drafts tab
        Object[][] dropsData = {
            {"Ramos", "rere@example.com", "1/22/24", "Drafts"},
            {"Molo", "myzkaji@example.com", "1/22/24", "Drafts"},
        };
        JPanel dropsPanel = new JPanel(new BorderLayout());  // Create a panel for the Drafts tab
        tabbedPane.addTab("Drafts", dropsPanel);  // Add the Drafts tab to the tabbed pane
        dropsTableModel = new DefaultTableModel(dropsData, columnNames) {  // Initialize the table model for the Drafts
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Make the table cells non-editable
            }
        };
        JTable dropsTable = new JTable(dropsTableModel);  // Create a table with the Drafts table model
        dropsTable.setPreferredScrollableViewportSize(new Dimension(550, 400));  // Set preferred size for the table
        JScrollPane dropsScrollPane = new JScrollPane(dropsTable);  // Create a scroll pane for the table
        dropsPanel.add(dropsScrollPane, BorderLayout.CENTER);  // Add the scroll pane to the panel
        centerTableHeaders(dropsTable);  // Center the headers of the table
        centerTableData(dropsTable);  // Center the data in the table

        // Add buttons to the bottom panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));  // Create a panel for the buttons
        contentPane.add(buttonPanel, BorderLayout.SOUTH);  // Add the button panel to the bottom of the content pane

        // "View" button
        JButton confirmButton = new JButton("View");  // Create a button for viewing message details
        confirmButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int tabIndex = tabbedPane.getSelectedIndex();  // Get the selected tab index
                JTable table = null;
                DefaultTableModel model = null;

                // Determine which table is currently active
                switch (tabIndex) {
                    case 0: // Inbox tab
                        table = inboxTable;
                        model = inboxTableModel;
                        break;
                    case 1: // Outbox tab
                        table = outboxTable;
                        model = outboxTableModel;
                        break;
                    case 2: // Drafts tab
                        table = dropsTable;
                        model = dropsTableModel;
                        break;
                    default:
                        break;
                }

                // Get selected row index
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) { // If a row is selected
                    // Retrieve data from selected row
                    String sender = model.getValueAt(selectedRow, 0).toString();
                    String receiver = model.getValueAt(selectedRow, 1).toString();
                    String date = model.getValueAt(selectedRow, 2).toString();
                    String messageType = model.getValueAt(selectedRow, 3).toString();

                    // Construct message
                    String message = "Sender: " + sender + "\n"
                                   + "Receiver: " + receiver + "\n"
                                   + "Date: " + date + "\n"
                                   + "Message Type: " + messageType;

                    // Show message in a dialog
                    JOptionPane.showMessageDialog(tabbedpane.this, message, "Message Details", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // Inform user to select a row
                    JOptionPane.showMessageDialog(tabbedpane.this, "Please select a message to view details.", "No message selected", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
        buttonPanel.add(confirmButton);  // Add the "View" button to the button panel

        // "Compose" button
        JButton composeButton = new JButton("Compose");  // Create a button for composing a new message
        composeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ManagementFrame managementFrame = new ManagementFrame(tabbedpane.this);  // Create and display the ManagementFrame for composing messages
                managementFrame.setVisible(true);
                dispose();  // Close the current frame
            }
        });
        buttonPanel.add(composeButton);  // Add the "Compose" button to the button panel

        // "Delete" button
        JButton deleteButton = new JButton("Delete");  // Create a button for deleting a message
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int tabIndex = tabbedPane.getSelectedIndex();  // Get the selected tab index
                JTable table = null;
                DefaultTableModel model = null;

                // Determine which table is currently active
                switch (tabIndex) {
                    case 0: // Inbox tab
                        table = inboxTable;
                        model = inboxTableModel;
                        break;
                    case 1: // Outbox tab
                        table = outboxTable;
                        model = outboxTableModel;
                        break;
                    case 2: // Drafts tab
                        table = dropsTable;
                        model = dropsTableModel;
                        break;
                    default:
                        break;
                }

                // Get selected row index
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) { // If a row is selected
                    // Retrieve data from selected row
                    String sender = model.getValueAt(selectedRow, 0).toString();
                    String receiver = model.getValueAt(selectedRow, 1).toString();
                    String date = model.getValueAt(selectedRow, 2).toString();
                    String messageType = model.getValueAt(selectedRow, 3).toString();

                    // Add the row to the RecycleBin
                    recycleBin.addRow(new Object[]{sender, receiver, date, messageType});

                    // Remove the row from the current table
                    model.removeRow(selectedRow);
                } else {
                    // Inform user to select a row
                    JOptionPane.showMessageDialog(tabbedpane.this, "Please select a message to delete.", "No message selected", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
        buttonPanel.add(deleteButton);  // Add the "Delete" button to the button panel

        // "Bin" button
        JButton moveToBinButton = new JButton("Bin");  // Create a button for opening the recycle bin
        moveToBinButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                recycleBin.setVisible(true);  // Show the recycle bin window
                dispose();  // Close the current frame
            }
        });
        buttonPanel.add(moveToBinButton);  // Add the "Bin" button to the button panel

        // Initially select the first tab
        tabbedPane.setSelectedIndex(0);  // Set the initial selected tab to the first tab (Inbox)
    }

    /**
     * Adds a new row to the Drafts table.
     * This method is called when a new draft message is created.
     * @param name Name of the sender
     * @param email Email address of the sender
     * @param formattedDate Date of the draft
     * @param messageType Type of the message (should be "Drafts")
     */
    public void updateDrops(String name, String email, String formattedDate, String messageType) {
        dropsTableModel.addRow(new Object[]{name, email, formattedDate, messageType});  // Add a new row to the Drafts table model
    }

    /**
     * Adds a new row to the Outbox table.
     * This method is called when a new message is sent.
     * @param name Name of the sender
     * @param email Email address of the sender
     * @param formattedDate Date of the message
     * @param messageType Type of the message (should be "Outbox")
     */
    public void updateOutbox(String name, String email, String formattedDate, String messageType) {
        outboxTableModel.addRow(new Object[]{name, email, formattedDate, messageType});  // Add a new row to the Outbox table model
    }

    /**
     * Centers the headers of a given table.
     * This method aligns the text in the table headers to the center.
     * @param table JTable whose headers need to be centered
     */
    private void centerTableHeaders(JTable table) {
        JTableHeader header = table.getTableHeader();  // Get the table header
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) header.getDefaultRenderer();  // Get the default renderer
        renderer.setHorizontalAlignment(SwingConstants.CENTER);  // Set the alignment to center
    }

    /**
     * Centers the data cells of a given table.
     * This method aligns the text in the data cells to the center.
     * @param table JTable whose data cells need to be centered
     */
    private void centerTableData(JTable table) {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();  // Create a new cell renderer
        renderer.setHorizontalAlignment(SwingConstants.CENTER);  // Set the alignment to center
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(renderer);  // Apply the renderer to each column
        }
    }

    /**
     * Switches the tab to the Outbox tab.
     * This method can be used to programmatically select the Outbox tab.
     */
    public void showOutboxTab() {
        tabbedPane.setSelectedIndex(1); // 1 corresponds to the index of the Outbox tab
    }
}
